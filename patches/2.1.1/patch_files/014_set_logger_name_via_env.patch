diff -Naurx .git -x node_modules -x share -x __pycache__ ../jupyterhub/jupyterhub/app.py ../jupyterhub-patched/jupyterhub/app.py
--- ../jupyterhub/jupyterhub/app.py	2022-08-31 09:22:54.674515851 +0200
+++ ../jupyterhub-patched/jupyterhub/app.py	2022-08-31 09:24:53.934515914 +0200
@@ -1403,6 +1403,37 @@
     proxy_process = None
     io_loop = None
 
+    @default('log')
+    def _log_default(self):
+        """Start logging for this application.
+
+        The default is to log to stderr using a StreamHandler, if no default
+        handler already exists.  The log level starts at logging.WARN, but this
+        can be adjusted by setting the ``log_level`` attribute.
+        """
+        logger_name = os.environ.get("LOGGER_NAME", self.__class__.__name__)
+        log = logging.getLogger(logger_name)
+        log.setLevel(self.log_level)
+        log.propagate = False
+        _log = log # copied from Logger.hasHandlers() (new in Python 3.2)
+        while _log:
+            if _log.handlers:
+                return log
+            if not _log.propagate:
+                break
+            else:
+                _log = _log.parent
+        if sys.executable and sys.executable.endswith('pythonw.exe'):
+            # this should really go to a file, but file-logging is only
+            # hooked up in parallel applications
+            _log_handler = logging.StreamHandler(open(os.devnull, 'w'))
+        else:
+            _log_handler = logging.StreamHandler()
+        _log_formatter = self._log_formatter_cls(fmt=self.log_format, datefmt=self.log_datefmt)
+        _log_handler.setFormatter(_log_formatter)
+        log.addHandler(_log_handler)
+        return log
+
     @default('log_level')
     def _log_level_default(self):
         return logging.INFO
         