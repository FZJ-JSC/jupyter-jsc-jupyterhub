apiVersion: v1
kind: ServiceAccount
metadata:
  name: tunnel-<ID>-svc-acc
  namespace: <NAMESPACE>
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tunnel-<ID>-cluster-role
  namespace: <NAMESPACE>
rules:
- apiGroups: [""]
  resources: ["services"]
  verbs: ["create", "delete"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tunnel-<ID>-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: tunnel-<ID>-svc-acc
  namespace: <NAMESPACE>
roleRef:
  kind: ClusterRole
  name: tunnel-<ID>-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion:  v1
kind: Service
metadata:
  name: tunnel-<ID>
  namespace: <NAMESPACE>
spec:
  selector:
    app: tunnel-<ID>
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: ssh
      port: 2222
      protocol: TCP
      targetPort: 2222
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tunnel-<ID>
  namespace: <NAMESPACE>
spec:
  selector:
    matchLabels:
      app: tunnel-<ID>
  template:
    metadata:
      labels:
        app: tunnel-<ID>
    spec:
      securityContext:
        fsGroup: 100
      imagePullSecrets:
      - name: gitlab-registry
      serviceAccountName: "tunnel-<ID>-svc-acc"
      containers:
      - env:
        - name: SSHCONFIGFILE
          value: "/home/tunnel/.ssh/config"
        - name: DEBUG
          value: "true"
        - name: DEVEL
          value: "true"
        - name: DEPLOYMENT_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app']
        - name: DEPLOYMENT_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: TUNNEL_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: tunnel-drf-<ID>
              key: tunnel_secret
              optional: false
        - name: TUNNEL_SUPERUSER_PASS
          valueFrom:
            secretKeyRef:
              name: tunnel-drf-<ID>
              key: superuser_pass
              optional: false
        - name: BACKEND_USER_PASS
          valueFrom:
            secretKeyRef:
              name: tunnel-drf-<ID>
              key: backend_pass
              optional: false
        - name: JUPYTERHUB_USER_PASS
          valueFrom:
            secretKeyRef:
              name: tunnel-drf-<ID>
              key: jupyterhub_pass
              optional: false
        image: registry.jsc.fz-juelich.de/jupyterjsc/k8s/images/tunneling-relaunch:<TUNNEL_VERSION>
        imagePullPolicy: Always
        name: tunnel-<ID>
        volumeMounts:
        - name: certs
          mountPath: /tmp/tunnel_ssh/ca-root.pem
          subPath: ca-root.pem
        - name: certs
          mountPath: /tmp/tunnel_ssh/tunnel.key
          subPath: tunnel.key
        - name: certs
          mountPath: /tmp/tunnel_ssh/tunnel.crt
          subPath: tunnel.crt
        - name: certs
          mountPath: /tmp/tunnel_ssh/tunnel.p12
          subPath: tunnel.p12
        - name: files
          mountPath: /tmp/tunnel_vscode/settings.json
          subPath: settings.json
        - name: files
          mountPath: /tmp/tunnel_vscode/launch.json
          subPath: launch.json
        - name: files
          mountPath: /tmp/tunnel_ssh/config
          subPath: config
        - name: files
          mountPath: /tmp/tunnel_ssh/authorized_keys
          subPath: authorized_keys
        - name: keypairs
          mountPath: /tmp/tunnel_ssh/tunnel
          subPath: tunnel
        - name: keypairs
          mountPath: /tmp/tunnel_ssh/remote
          subPath: remote
      volumes:
      - name: files
        configMap:
          defaultMode: 400
          name: tunnel-files-<ID>
      - name: certs
        secret:
          defaultMode: 400
          secretName: certs-<ID>
      - name: keypairs
        secret:
          defaultMode: 400
          secretName: keypairs-<ID>
