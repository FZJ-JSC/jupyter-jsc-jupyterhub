diff -Naurx .git -x node_modules -x share -x __pycache__ ../jupyterhub/jupyterhub/apihandlers/users.py ../jupyterhub-patched/jupyterhub/apihandlers/users.py
--- ../jupyterhub/jupyterhub/apihandlers/users.py	2022-08-31 10:34:29.000000000 +0200
+++ ../jupyterhub-patched/jupyterhub/apihandlers/users.py	2022-08-31 11:55:02.000000000 +0200
@@ -25,6 +25,8 @@
 from ..utils import url_path_join
 from .base import APIHandler
 
+from custom_utils.server_limit import named_server_limit_per_user_exceeded
+
 
 class SelfAPIHandler(APIHandler):
     """Return the authenticated user's model
@@ -540,6 +542,15 @@
                 raise web.HTTPError(400, "%s is already running" % spawner._log_name)
 
         options = self.get_json_body()
+        exceeded = named_server_limit_per_user_exceeded(user, options)
+        if exceeded:
+            raise web.HTTPError(
+                400,
+                reason="User {name} already has the maximum number of {limit} servers with configuration \"{type} - {value}\" running simultaneously."
+                    "  One must be stopped before a new server can be created".format(
+                        name=user_name, limit=exceeded[2], type=exceeded[0], value=exceeded[1]
+                ),
+            )
         await self.spawn_single_user(user, server_name, options=options)
         status = 202 if spawner.pending == 'spawn' else 201
         self.set_header('Content-Type', 'text/plain')
diff -Naurx .git -x node_modules -x share -x __pycache__ ../jupyterhub/jupyterhub/handlers/pages.py ../jupyterhub-patched/jupyterhub/handlers/pages.py
--- ../jupyterhub/jupyterhub/handlers/pages.py	2022-08-31 11:36:56.000000000 +0200
+++ ../jupyterhub-patched/jupyterhub/handlers/pages.py	2022-08-31 11:55:52.000000000 +0200
@@ -20,6 +20,7 @@
 from .base import BaseHandler
 
 from custom_utils import get_maintenance_list
+from custom_utils.server_limit import named_server_limit_per_user_exceeded
 from handler.page_handlers import get_user_auth_state_with_vos
 
 
@@ -203,6 +204,15 @@
                     spawner._log_name,
                 )
                 options = await maybe_future(spawner.options_from_query(query_options))
+                exceeded = named_server_limit_per_user_exceeded(user, options)
+                if exceeded:
+                    raise web.HTTPError(
+                        400,
+                        reason="User {name} already has the maximum number of {limit} servers with configuration \"{type} - {value}\" running simultaneously."
+                            "  One must be stopped before a new server can be created".format(
+                                name=user_name, limit=exceeded[2], type=exceeded[0], value=exceeded[1]
+                        ),
+                    )
                 return await self._wrap_spawn_single_user(
                     user, server_name, spawner, pending_url, options
                 )
