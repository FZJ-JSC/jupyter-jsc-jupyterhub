diff -Naur jupyterhub/jupyterhub/auth.py jupyterhub-patched/jupyterhub/auth.py
--- jupyterhub/jupyterhub/auth.py	2025-07-02 12:43:13.577151221 +0200
+++ jupyterhub-patched/jupyterhub/auth.py	2025-07-02 14:02:38.813642996 +0200
@@ -106,6 +106,19 @@
         """,
     )
 
+    refresh_pre_stop = Bool(
+        False,
+        config=True,
+        help="""Force refresh of auth prior to stop.
+        This forces :meth:`.refresh_user` to be called prior to stopping
+        a server, to ensure that auth state is up-to-date.
+        This can be important when e.g. auth tokens that may have expired
+        are passed to the spawner via environment variables from auth_state.
+        If refresh_user cannot refresh the user auth data,
+        stop will fail until the user logs in again.
+        """,
+    )
+
     admin_users = Set(
         help="""
         Set of users that will be granted admin rights on this JupyterHub.
diff -Naur jupyterhub/jupyterhub/handlers/base.py jupyterhub-patched/jupyterhub/handlers/base.py
--- jupyterhub/jupyterhub/handlers/base.py	2025-07-02 12:43:13.577151221 +0200
+++ jupyterhub-patched/jupyterhub/handlers/base.py	2025-07-02 14:02:56.361800801 +0200
@@ -1326,6 +1326,14 @@
         spawner = user.spawners[server_name]
         if spawner.pending:
             raise RuntimeError(f"{spawner._log_name} pending {spawner.pending}")
+
+        if self.authenticator.refresh_pre_stop:
+            auth_user = await self.refresh_auth(user, force=True)
+            if auth_user is None:
+                raise web.HTTPError(
+                    403, "auth has expired for %s, login again", user.name
+                )
+
         # set user._stop_pending before doing anything async
         # to avoid races
         spawner._stop_pending = True
