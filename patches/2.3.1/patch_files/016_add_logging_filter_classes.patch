diff -Naurx .git -x node_modules -x share -x __pycache__ ../jupyterhub/jupyterhub/app.py ../jupyterhub-patched/jupyterhub/app.py
--- ../jupyterhub/jupyterhub/app.py	2023-03-28 09:51:37.095866543 +0200
+++ ../jupyterhub-patched/jupyterhub/app.py	2023-03-28 09:52:05.285857485 +0200
@@ -1506,6 +1506,32 @@
             # return an empty mock object!
             return EmptyClass()
 
+    logging_filter_classes = Any(
+        help="""
+        An optional hook function that you can implement to filter logs.
+        """
+    ).tag(config=True)
+
+    def apply_logging_filter_classes(self):
+        """Add the logging filter class if defined"""
+        if self.logging_filter_classes is not None:
+            available_logger_dict = {
+                "jupyterhub": self.log,
+                "tornado": logging.getLogger("tornado"),
+                "oauthlib": logging.getLogger("oauthlib"),
+                "app_log": app_log,
+                "access_log": access_log,
+                "gen_log": gen_log
+            }
+            for key, value in available_logger_dict.items():
+                try:
+                    value.addFilter(self.logging_filter_classes[key]())
+                except KeyError:
+                    # Filter for logger key not defined
+                    pass
+                except Exception:
+                    self.log.exception("apply_logging_filter_class failed with exception: %s", self)
+
     def init_logging(self):
         # This prevents double log messages because tornado use a root logger that
         # self.log is a child of. The logging module dipatches log messages to a log
@@ -1542,6 +1568,8 @@
             logger.propagate = True
             logger.parent = self.log
             logger.setLevel(self.log.level)
+        
+        self.apply_logging_filter_classes()
 
     @staticmethod
     def add_url_prefix(prefix, handlers):
