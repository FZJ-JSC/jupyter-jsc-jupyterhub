diff -Naurx .git -x node_modules -x share -x __pycache__ ../jupyterhub/jupyterhub/apihandlers/users.py ../jupyterhub-patched/jupyterhub/apihandlers/users.py
--- ../jupyterhub/jupyterhub/apihandlers/users.py	2022-08-31 12:01:45.000000000 +0200
+++ ../jupyterhub-patched/jupyterhub/apihandlers/users.py	2022-08-31 12:14:24.000000000 +0200
@@ -293,6 +293,7 @@
                 "%s's server is in the process of stopping, please wait." % user_name,
             )
         if user.running:
+            self.log.info(f"Stop unnamed server of user {user_name}", extra={"action": "stoporigin"})
             await self.stop_single_user(user)
             if user.spawner._stop_pending:
                 raise web.HTTPError(
@@ -609,6 +610,7 @@
             # include notify, so that a server that died is noticed immediately
             status = await spawner.poll_and_notify()
             if status is None:
+                self.log.info(f"Stop server before deleting it {user_name} {server_name}", extra={"action": "stoporigin"})
                 stop_future = await self.stop_single_user(user, server_name)
 
         if remove:
diff -Naurx .git -x node_modules -x share -x __pycache__ ../jupyterhub/jupyterhub/app.py ../jupyterhub-patched/jupyterhub/app.py
--- ../jupyterhub/jupyterhub/app.py	2022-08-31 12:13:00.000000000 +0200
+++ ../jupyterhub-patched/jupyterhub/app.py	2022-08-31 12:15:02.000000000 +0200
@@ -2515,7 +2515,7 @@
             spawner = user.spawners[server_name]
             status = await spawner.poll()
             self.log.warning(
-                "User %s server stopped with exit code: %s", user.name, status
+                f"User {user.name} server stopped with exit code: {status}", extra={"action": "stoporigin"}
             )
             await self.proxy.delete_user(user, server_name)
             await user.stop(server_name)
@@ -2966,6 +2966,9 @@
             for uid, user in self.users.items():
                 for name, spawner in list(user.spawners.items()):
                     if spawner.active:
+                        self.log.warning(
+                            f"Cleaning up single-user servers. {user.name} {name}", extra={"action": "stoporigin"}
+                        )
                         futures.append(asyncio.ensure_future(user.stop(name)))
         else:
             self.log.info("Leaving single-user servers running")
diff -Naurx .git -x node_modules -x share -x __pycache__ ../jupyterhub/jupyterhub/handlers/login.py ../jupyterhub-patched/jupyterhub/handlers/login.py
--- ../jupyterhub/jupyterhub/handlers/login.py	2022-08-31 10:34:29.000000000 +0200
+++ ../jupyterhub-patched/jupyterhub/handlers/login.py	2022-08-31 12:15:35.000000000 +0200
@@ -30,7 +30,7 @@
             if spawner.active and not spawner.pending
         ]
         if active_servers:
-            self.log.info("Shutting down %s's servers", user.name)
+            self.log.info(f"Shutting down {user.name}'s servers: {active_servers}", extra={"action": "stoporigin"})
             futures = []
             for server_name in active_servers:
                 futures.append(maybe_future(self.stop_single_user(user, server_name)))
diff -Naurx .git -x node_modules -x share -x __pycache__ ../jupyterhub/jupyterhub/user.py ../jupyterhub-patched/jupyterhub/user.py
--- ../jupyterhub/jupyterhub/user.py	2022-08-31 12:06:49.000000000 +0200
+++ ../jupyterhub-patched/jupyterhub/user.py	2022-08-31 12:18:18.000000000 +0200
@@ -814,7 +814,8 @@
                 self.log.warning(
                     f"{self.name}'s server failed to start"
                     f" in {spawner.start_timeout} seconds, giving up."
-                    f"\n{start_timeout_message}"
+                    f"\n{start_timeout_message}",
+                    extra={"action": "stoporigin"}
                 )
                 e.reason = 'timeout'
                 self.settings['statsd'].incr('spawner.failure.timeout')
@@ -822,7 +823,8 @@
                 self.log.exception(
                     "Unhandled error starting {user}'s server: {error}".format(
                         user=self.name, error=e
-                    )
+                    ),
+                    extra={"action": "stoporigin"}
                 )
                 self.settings['statsd'].incr('spawner.failure.error')
                 e.reason = 'error'
@@ -874,7 +876,8 @@
                 self.log.warning(
                     f"{self.name}'s server never showed up at {server.url}"
                     f" after {spawner.http_timeout} seconds. Giving up."
-                    f"\n{http_timeout_message}"
+                    f"\n{http_timeout_message}",
+                    extra={"action": "stoporigin"}
                 )
                 e.reason = 'timeout'
                 self.settings['statsd'].incr('spawner.failure.http_timeout')
@@ -883,7 +886,8 @@
                 self.log.exception(
                     "Unhandled error waiting for {user}'s server to show up at {url}: {error}".format(
                         user=self.name, url=server.url, error=e
-                    )
+                    ),
+                    extra={"action": "stoporigin"}
                 )
                 self.settings['statsd'].incr('spawner.failure.http_error')
             # store state again for spawner.events
@@ -927,8 +931,8 @@
         spawner._stop_pending = True
         self.spawn_stop_event.set()
 
-        self.log.debug("Stopping %s", spawner._log_name)
-
+        self.log.info(f"Stopping {spawner._log_name}", extra={"action": "stoporigin"})
+        
         try:
             api_token = spawner.api_token
             status = await spawner.poll()
