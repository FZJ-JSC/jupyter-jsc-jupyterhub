diff -Naurx .git -x node_modules -x share -x __pycache__ ../jupyterhub/jupyterhub/handlers/base.py ../jupyterhub-patched/jupyterhub/handlers/base.py
--- ../jupyterhub/jupyterhub/handlers/base.py	2022-02-17 13:31:04.000000000 +0000
+++ ../jupyterhub-patched/jupyterhub/handlers/base.py	2022-02-18 09:46:29.256039831 +0000
@@ -19,6 +19,7 @@
 from urllib.parse import urlparse
 from urllib.parse import urlunparse
 
+from custom_utils import get_vos
 from jinja2 import TemplateNotFound
 from sqlalchemy.exc import SQLAlchemyError
 from tornado import gen
@@ -55,6 +56,9 @@
 from ..utils import maybe_future
 from ..utils import url_path_join
 
+import nest_asyncio
+nest_asyncio.apply()
+
 # pattern for the authentication token header
 auth_header_pat = re.compile(r'^(?:token|bearer)\s+([^\s]+)$', flags=re.IGNORECASE)
 
@@ -1274,6 +1278,19 @@
             parsed_scopes=self.parsed_scopes,
             expanded_scopes=self.expanded_scopes,
         )
+        if user:
+            get_task = asyncio.get_event_loop().create_task(user.get_auth_state())
+            asyncio.get_event_loop().run_until_complete(get_task)
+            auth_state = get_task.result()
+            vo_active, vo_available = get_vos(auth_state, user)
+            auth_state["vo_active"] = vo_active
+            auth_state["vo_available"] = vo_available
+            save_task = asyncio.get_event_loop().create_task(
+                user.save_auth_state(auth_state)
+            )
+            asyncio.get_event_loop().run_until_complete(save_task)
+            ns["auth_state"] = auth_state
+            ns["auth_state"]["refresh_token"] = "***"
         if self.settings['template_vars']:
             ns.update(self.settings['template_vars'])
         return ns
diff -Naurx .git -x node_modules -x share -x __pycache__ ../jupyterhub/jupyterhub/handlers/pages.py ../jupyterhub-patched/jupyterhub/handlers/pages.py
--- ../jupyterhub/jupyterhub/handlers/pages.py	2022-02-17 13:30:53.000000000 +0000
+++ ../jupyterhub-patched/jupyterhub/handlers/pages.py	2022-02-18 10:20:27.751217598 +0000
@@ -67,10 +67,8 @@
         else:
             url = url_path_join(self.hub.base_url, 'spawn', user.escaped_name)
 
-        auth_state = await user.get_auth_state()
         html = await self.render_template(
             'home.html',
-            auth_state=auth_state,
             user=user,
             url=url,
             allow_named_servers=self.allow_named_servers,
@@ -94,11 +92,9 @@
     default_url = None
 
     async def _render_form(self, for_user, spawner_options_form, message=''):
-        auth_state = await for_user.get_auth_state()
         return await self.render_template(
             'spawn.html',
             for_user=for_user,
-            auth_state=auth_state,
             spawner_options_form=spawner_options_form,
             error_message=message,
             url=self.request.uri,
@@ -366,8 +362,6 @@
         # if spawning fails for any reason, point users to /hub/home to retry
         self.extra_error_html = self.spawn_home_error
 
-        auth_state = await user.get_auth_state()
-
         # First, check for previous failure.
         if (
             not spawner.active
@@ -387,7 +381,6 @@
             html = await self.render_template(
                 "not_running.html",
                 user=user,
-                auth_state=auth_state,
                 server_name=server_name,
                 spawn_url=spawn_url,
                 failed=True,
@@ -414,7 +407,6 @@
                 user=user,
                 spawner=spawner,
                 progress_url=spawner._progress_url,
-                auth_state=auth_state,
             )
             self.finish(html)
             return
@@ -439,7 +431,6 @@
             html = await self.render_template(
                 "not_running.html",
                 user=user,
-                auth_state=auth_state,
                 server_name=server_name,
                 spawn_url=spawn_url,
             )
@@ -463,11 +454,9 @@
     @needs_scope('admin:users')
     @needs_scope('admin:servers')
     async def get(self):
-        auth_state = await self.current_user.get_auth_state()
         html = await self.render_template(
             'admin.html',
             current_user=self.current_user,
-            auth_state=auth_state,
             admin_access=self.settings.get('admin_access', False),
             allow_named_servers=self.allow_named_servers,
             named_server_limit_per_user=self.named_server_limit_per_user,
@@ -548,12 +537,10 @@
 
         oauth_clients = sorted(oauth_clients, key=sort_key, reverse=True)
 
-        auth_state = await self.current_user.get_auth_state()
         html = await self.render_template(
             'token.html',
             api_tokens=api_tokens,
             oauth_clients=oauth_clients,
-            auth_state=auth_state,
         )
         self.finish(html)
 
