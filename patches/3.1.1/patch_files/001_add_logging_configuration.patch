diff -Naurx .git -x node_modules -x share -x __pycache__ ../jupyterhub/jupyterhub/app.py ../jupyterhub-patched/jupyterhub/app.py
--- ../jupyterhub/jupyterhub/app.py	2023-04-03 13:29:48.624053693 +0200
+++ ../jupyterhub-patched/jupyterhub/app.py	2023-04-04 09:03:45.391696007 +0200
@@ -1403,6 +1403,63 @@
     proxy_process = None
     io_loop = None
 
+    @default('log')
+    def _log_default(self):
+        """Start logging for this application.
+
+        The default is to log to stderr using a StreamHandler, if no default
+        handler already exists.  The log level starts at logging.WARN, but this
+        can be adjusted by setting the ``log_level`` attribute.
+        """
+        logger_name = os.environ.get("LOGGER_NAME", self.__class__.__name__)
+        log = logging.getLogger(logger_name)
+        log.setLevel(self.log_level)
+        log.propagate = False
+        _log = log # copied from Logger.hasHandlers() (new in Python 3.2)
+        while _log:
+            if _log.handlers:
+                return log
+            if not _log.propagate:
+                break
+            else:
+                _log = _log.parent
+        if sys.executable and sys.executable.endswith('pythonw.exe'):
+            # this should really go to a file, but file-logging is only
+            # hooked up in parallel applications
+            _log_handler = logging.StreamHandler(open(os.devnull, 'w'))
+        else:
+            _log_handler = logging.StreamHandler()
+        _log_formatter = self._log_formatter_cls(fmt=self.log_format, datefmt=self.log_datefmt)
+        _log_handler.setFormatter(_log_formatter)
+        log.addHandler(_log_handler)
+        return log
+
+    logging_filter_classes = Any(
+        help="""
+        An optional hook function that you can implement to filter logs.
+        """
+    ).tag(config=True)
+
+    def apply_logging_filter_classes(self):
+        """Add the logging filter class if defined"""
+        if self.logging_filter_classes is not None:
+            available_logger_dict = {
+                "jupyterhub": self.log,
+                "tornado": logging.getLogger("tornado"),
+                "oauthlib": logging.getLogger("oauthlib"),
+                "app_log": app_log,
+                "access_log": access_log,
+                "gen_log": gen_log
+            }
+            for key, value in available_logger_dict.items():
+                try:
+                    value.addFilter(self.logging_filter_classes[key]())
+                except KeyError:
+                    # Filter for logger key not defined
+                    pass
+                except Exception:
+                    self.log.exception("apply_logging_filter_class failed with exception: %s", self)
+
     @default('log_level')
     def _log_level_default(self):
         return logging.INFO
@@ -1507,6 +1564,8 @@
             logger.propagate = True
             logger.parent = self.log
             logger.setLevel(self.log.level)
+        
+        self.apply_logging_filter_classes()
 
     @staticmethod
     def add_url_prefix(prefix, handlers):
