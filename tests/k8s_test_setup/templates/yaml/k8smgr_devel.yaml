apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8smgr-<ID>-svc-acc
  namespace: <NAMESPACE>
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: k8smgr-<ID>-cluster-role
  namespace: <NAMESPACE>
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["create", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["create", "delete"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "delete"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "delete"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: k8smgr-<ID>-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: k8smgr-<ID>-svc-acc
  namespace: <NAMESPACE>
roleRef:
  kind: ClusterRole
  name: k8smgr-<ID>-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion:  v1
kind: Service
metadata:
  name: k8smgr-<ID>
  namespace: <NAMESPACE>
spec:
  selector:
    app: k8smgr-<ID>
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: ssh
      port: 2222
      protocol: TCP
      targetPort: 2222
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8smgr-<ID>
  namespace: <NAMESPACE>
spec:
  selector:
    matchLabels:
      app: k8smgr-<ID>
  template:
    metadata:
      labels:
        app: k8smgr-<ID>
    spec:
      securityContext:
        fsGroup: 100
      imagePullSecrets:
      - name: gitlab-registry
      serviceAccountName: k8smgr-<ID>-svc-acc
      containers:
      - image: registry.jsc.fz-juelich.de/jupyterjsc/k8s/images/k8s-service-manager:devel
        imagePullPolicy: Always
        name: k8smgr-<ID>
        command: ["/bin/bash"]
        args:
        - -c
        - >-
            tar -xzf /tmp/files.tar.gz -C /tmp &&
            /bin/bash /home/k8smgr/web/entrypoint.sh
            # while true; do sleep 30; done
            # /bin/bash /tmp/input/start.sh
        envFrom:
        - secretRef:
            name: k8smgr-drf-<ID>
        env:
        - name: CONFIG_PATH
          value: "/tmp/files/config.json"
        - name: DEBUG
          value: "true"
        - name: DEPLOYMENT_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app']
        - name: DEPLOYMENT_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: TUNNEL_BASIC
          valueFrom:
            secretKeyRef:
              name: tunnel-drf-<ID>
              key: K8SMGR_USER_BASIC
              optional: false
        volumeMounts:
        - name: certs
          mountPath: /home/k8smgr/certs/ca-root.pem
          subPath: ca-root.pem
        - name: certs
          mountPath: /home/k8smgr/certs/k8smgr.key
          subPath: k8smgr.key
        - name: certs
          mountPath: /home/k8smgr/certs/k8smgr.crt
          subPath: k8smgr.crt
        - name: files
          mountPath: /tmp/files.tar.gz
          subPath: files.tar.gz
        - name: files
          mountPath: /tmp/k8smgr_ssh/manage_tunnel.sh
          subPath: manage_tunnel.sh
        - name: files
          mountPath: /tmp/k8smgr_ssh/authorized_keys
          subPath: authorized_keys
        - name: keypairs
          mountPath: /tmp/k8smgr_ssh/k8smgr
          subPath: k8smgr
        - name: files
          mountPath: /tmp/k8smgr_vscode/launch.json
          subPath: launch.json
        - name: files
          mountPath: /tmp/k8smgr_vscode/settings.json
          subPath: settings.json
      volumes:
      - name: files
        configMap:
          defaultMode: 400
          name: k8smgr-files-<ID>
      - name: certs
        secret:
          defaultMode: 400
          secretName: certs-<ID>
      - name: keypairs
        secret:
          defaultMode: 400
          secretName: keypairs-<ID>
