diff -Naurx .git -x node_modules -x share -x __pycache__ ../jupyterhub/jupyterhub/apihandlers/users.py ../jupyterhub-patched/jupyterhub/apihandlers/users.py
--- ../jupyterhub/jupyterhub/apihandlers/users.py	2023-05-02 09:02:00.242272031 +0200
+++ ../jupyterhub-patched/jupyterhub/apihandlers/users.py	2023-05-02 09:04:25.492226904 +0200
@@ -710,20 +710,12 @@
         # - spawner not running at all
         # - spawner failed
         # - spawner pending start (what we expect)
-        url = url_path_join(user.url, url_escape_path(server_name), '/')
-        ready_event = {
-            'progress': 100,
-            'ready': True,
-            'message': f"Server ready at {url}",
-            'html_message': 'Server ready at <a href="{0}">{0}</a>'.format(url),
-            'url': url,
-        }
         failed_event = {'progress': 100, 'failed': True, 'message': "Spawn failed"}
 
         if spawner.ready:
             # spawner already ready. Trigger progress-completion immediately
             self.log.info("Server %s is already started", spawner._log_name)
-            await self.send_event(ready_event)
+            await self.send_event(spawner.get_ready_event())
             return
 
         spawn_future = spawner._spawn_future
@@ -766,7 +758,7 @@
         if spawner.ready:
             # spawner is ready, signal completion and redirect
             self.log.info("Server %s is ready", spawner._log_name)
-            await self.send_event(ready_event)
+            await self.send_event(spawner.get_ready_event())
         else:
             # what happened? Maybe spawn failed?
             f = spawn_future
diff -Naurx .git -x node_modules -x share -x __pycache__ ../jupyterhub/jupyterhub/spawner.py ../jupyterhub-patched/jupyterhub/spawner.py
--- ../jupyterhub/jupyterhub/spawner.py	2023-05-02 09:02:00.242272031 +0200
+++ ../jupyterhub-patched/jupyterhub/spawner.py	2023-05-02 09:05:38.052204282 +0200
@@ -1257,6 +1257,32 @@
     def _progress_url(self):
         return self.user.progress_url(self.name)
 
+    ready_event = Callable(
+        help="""
+        An optional hook function that you can implement to use a different
+        ready event.
+
+        This can be set independent of any concrete spawner implementation.
+        """
+    ).tag(config=True)
+
+    @default("ready_event")
+    def _ready_event(self):
+        return self._default_ready_event
+
+    def _default_ready_event(self, spawner):
+        url = url_path_join(self.user.url, url_escape_path(self.name), '/')
+        return {
+            'progress': 100,
+            'ready': True,
+            'message': f"Server ready at {url}",
+            'html_message': 'Server ready at <a href="{0}">{0}</a>'.format(url),
+            'url': url,
+        }
+
+    def get_ready_event(self):
+        return self.ready_event(self)
+
     async def _generate_progress(self):
         """Private wrapper of progress generator
 
